import os
from subprocess import call

#initialize the environment
env = Environment()

#Paths
#---------------------------------------
sourcePath = '../src/'

headers = ['../gtest/include/', 
            '../gtest/',
            '../gtest/internal/', 
            '../gtest/src/'
            ]

libgtest_sources = ['../gtest/src/gtest.cc',
                    '../gtest/src/gtest_main.cc',
                    '../gtest/src/gtest-death-test.cc',
                    '../gtest/src/gtest-filepath.cc',
                    '../gtest/src/gtest-port.cc',
                    '../gtest/src/gtest-printers.cc',
                    '../gtest/src/gtest-test-part.cc',
                    '../gtest/src/gtest-typed-test.cc'
                    ]

tictactoe_sources = Glob('../src/*.cpp')
#['../src/main.cpp', '../src/counter.cpp']

test_sources = Glob('../test/*.cpp')+[
            '../src/counter.cpp'
            ]


#Tell scons were stuff is
env.Append(CPPPATH = headers)
env.Append(LIBPATH = ['../lib/'])
env.Append(CXXFLAGS = ['-pthread'])

#Build targets
#---------------------------------------

#Google test framwork
libgtest = env.Library(target='libgtest', source = libgtest_sources)

#TicTacToe game
tictactoe = env.Program(target='tictactoe', source = tictactoe_sources)

#TicTacToe unit tests
all_tests = env.Program(target='all_tests', source = test_sources,  LIBS=['libgtest'], LIBPATH='.')


#Post actions
#--------------------------------

#After building all tests
def post_test(target, source, env):
    print "Running unittests"
    #output = os.popen('./all_tests').read()
    call(["./build/all_tests"])
    #print output

env.AddPostAction(all_tests, post_test)




#Other stuff
#-----------------------------------------------

#post_build = env.Builder(action = hello)
#env = Environment(BUILDERS = {'Post Build' : post_build})

#Depends(all_test, post_build)


#output = os.popen('./all_tests').read()
#print output

#Program( 'test', test_sources, LIBS=['gtest'], LIBPATH='../lib/' )

#Set default target
#Default(tictactoe)


#Program('program', Glob('*.c'))

#test = Command( target = "tictactoe_test",
#                source = "./tictactoe",
#                action = "./tictactoe > $TARGET" )

#Build condition
#Depends( test, tictactoe )
#AlwaysBuild( test )

#Runs ls command after build, not shure how this works
#ls = Command ('ls', None, 'ls')
#AlwaysBuild ('ls')
#Default ('ls')